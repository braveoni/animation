import{_ as d,o as f,c}from"./index-e0dfee84.js";const p=()=>{const s=document.querySelector("canvas"),e=s.getContext("2d");s.width=window.innerWidth,s.height=window.innerHeight,e.fillStyle="white",e.strokeStyle="white",e.lineCap="round",e.lineJoin="round",e.lineWidth=1;class l{constructor(t){this.effect=t,this.x=Math.floor(Math.random()*t.width),this.y=Math.floor(Math.random()*t.height),this.speed={x:0,y:0},this.speedModifier=Math.floor(Math.random()*3+1),this.positions=[{x:this.x,y:this.y}],this.maxLenght=Math.floor(Math.random()*1e3+10),this.angle=0,this.timer=this.maxLenght*2}draw(t){t.beginPath(),t.moveTo(this.positions[0].x,this.positions[0].y);for(let i=0;i<this.positions.length;i++)t.lineTo(this.positions[i].x,this.positions[i].y);t.shadowBlur=10,t.shadowColor="white",t.stroke()}update(){if(this.timer--,this.timer>=1){let t=Math.floor(this.x/this.effect.cellSize),o=Math.floor(this.y/this.effect.cellSize)*this.effect.cols+t;this.angle=this.effect.flowFields[o],this.speed={x:Math.cos(this.angle)*this.speedModifier,y:Math.sin(this.angle)*this.speedModifier},this.x+=this.speed.x,this.y+=this.speed.y,this.positions.push({x:this.x,y:this.y}),this.positions.length>this.maxLenght&&this.positions.shift()}else this.positions.length>1?this.positions.shift():this.reset()}reset(){this.x=Math.floor(Math.random()*this.effect.width),this.y=Math.floor(Math.random()*this.effect.height),this.positions=[{x:this.x,y:this.y}],this.timer=this.maxLenght*2}}class r{constructor(t,i){this.width=t,this.height=i,this.particles=[],this.numberOfParticles=512,this.cellSize=16,this.rows,this.cols,this.flowFields=[],this.curve=.67,this.zoom=.05,this.init()}init(){this.cols=Math.floor(this.width/this.cellSize),this.rows=Math.floor(this.height/this.cellSize),this.flowFields=[];for(let t=0;t<this.rows;t++)for(let i=0;i<this.cols;i++){let o=(Math.cos(i*this.zoom)+Math.sin(t*this.zoom))*this.curve;this.flowFields.push(o)}for(let t=0;t<this.numberOfParticles;t++)this.particles.push(new l(this))}drawGrid(t){t.save(),t.strokeStyle="red";for(let i=0;i<this.cols;i++)t.beginPath(),t.moveTo(this.cellSize*i,0),t.lineTo(this.cellSize*i,this.height),t.stroke();for(let i=0;i<this.rows;i++)t.beginPath(),t.moveTo(0,this.cellSize*i),t.lineTo(this.width,this.cellSize*i),t.stroke();t.restore()}render(t){this.particles.forEach(i=>{i.draw(t),i.update()})}}const a=new r(s.width,s.height);function h(){e.clearRect(0,0,s.width,s.height),a.render(e),requestAnimationFrame(h)}h()},w={name:"FlowField",data(){return{}},methods:{},mounted(){p()}},m={id:"flowfield"};function u(s,e,l,r,a,h){return f(),c("canvas",m)}const y=d(w,[["render",u],["__scopeId","data-v-3ec459ff"]]);export{y as default};
